#+TITLE: rigole's emacs config
#+AUTHOR: rigole
#+PROPERTY: header-args :tangle yes
#+auto_tangle: t
#+STARTUP: showeverything

* Table of contents :toc:
- [[#emacs-configuration][Emacs configuration]]
  - [[#global][Global]]
  - [[#eshell][Eshell]]
- [[#global-keybindings-and-functions][Global keybindings and functions]]
- [[#global-packages][Global Packages]]
  - [[#org-auto-tangle][org-auto-tangle]]
  - [[#org-modern][org-modern]]
  - [[#clang-format][clang-format+]]
  - [[#which-key][which-key]]
  - [[#lsp-mode][lsp-mode]]
  - [[#lsp-ui][lsp-ui]]
  - [[#all-the-icons][all-the-icons]]
  - [[#dashboard][dashboard]]
  - [[#linum-relative][linum-relative]]
  - [[#beacon][beacon]]
  - [[#helpful][helpful]]
  - [[#ace-window][ace-window]]
  - [[#ace-jump-mode][ace-jump-mode]]
  - [[#goto-line-preview][goto-line-preview]]
  - [[#indent-bars][indent-bars]]
  - [[#crux][crux]]
  - [[#toc-org][toc-org]]
  - [[#yasnippet][Yasnippet]]
  - [[#hydra][hydra]]
  - [[#company][company]]
  - [[#nov][nov]]
  - [[#treesit-auto][treesit-auto]]
  - [[#vterm][vterm]]
  - [[#flycheck][flycheck]]
  - [[#delight][delight]]
  - [[#combobulate][combobulate]]
  - [[#dap-mode][dap-mode]]
  - [[#undo-tree][undo-tree]]
  - [[#transpose-frame][transpose-frame]]
  - [[#projectile][projectile]]
  - [[#list-of-packages-i-should-look-into][List of packages I should look into]]
- [[#themes][Themes]]
  - [[#catpuccin][Catpuccin]]
  - [[#default-theme][default theme]]
  - [[#loaded-theme][Loaded theme]]
- [[#hooks][Hooks]]
- [[#language-packages-and-config][Language packages and config]]
  - [[#laravel][Laravel]]
  - [[#vlang][Vlang]]
  - [[#yuck-eww][Yuck (eww)]]
  - [[#c][C]]
- [[#org--latex][Org + LaTeX]]
  - [[#packages][Packages]]
  - [[#config][config]]

* Emacs configuration

** Global
#+BEGIN_SRC emacs-lisp
;; Initialisation
(setq inhibit-default-init t
      inhibit-startup-echo-area-message t
      inhibit-startup-screen t
      initial-scratch-message nil)

;; enable y/n answers
(fset 'yes-or-no-p 'y-or-n-p)

;; Warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)

;; ignore some warnings
(setq warning-minimum-level :emergency)

;; Keep emacs Custom-settings in separate file.
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))

;; store all backup and autosave files in the tmp dir
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; revert buffers automatically when underlying files are changed externally
(global-auto-revert-mode t)

;; Make backups of files, even when they're in version control.
(setq vc-make-backup-files t)

;; Defaults to UTF-8 (Hi Windows!)
(set-default-coding-systems 'utf-8)

;; Modes
(fido-mode t)
(electric-pair-mode t)
(winner-mode t)
(line-number-mode t)
(size-indication-mode t)
(delete-selection-mode t)

;; Removal of interface
(package-initialize)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Org mode fixes
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)

;; quick optimization for lsps
(setq read-process-output-max (* 1024 1024)) ;; 1mb

; Fixing dired mouse click
(with-eval-after-load 'dired
  (define-key dired-mode-map [mouse-2] 'dired-mouse-find-file))

;; show dashboard for emacsclient
(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))

;; add make extension .gmk
(add-to-list 'auto-mode-alist '("\\.gmk\\'" . makefile-mode))
#+END_SRC

** Eshell

#+begin_src emacs-lisp
(setq eshell-ls-initial-args "-lah")
#+end_src

* Global keybindings and functions
Mainly macros and global fucntions I use

#+begin_src emacs-lisp
;; Opens eshell window on the right
(global-set-key (kbd "C-c e") #'(lambda ()
				  (interactive)
				  (split-window-right)
				  (windmove-right)
				  (eshell)))

(defun clear-undo-tree ()
  (interactive)
  (setq buffer-undo-tree nil))

;; ibuffer is actually better, why is it not bound by default
(global-set-key [remap list-buffers] 'ibuffer)
#+end_src

* Global Packages

** org-auto-tangle
Auto reloads org files
#+BEGIN_SRC emacs-lisp
(use-package org-auto-tangle
  :delight
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+END_SRC

** org-modern
Makes org files way better
#+BEGIN_SRC emacs-lisp
(use-package org-modern
  :delight
  :hook ((org-mode . org-modern-mode)
	 (org-agenda-finalize . org-modern-agenda)))
#+END_SRC

** clang-format+
Nice clang format package
#+BEGIN_SRC emacs-lisp
(use-package clang-format+
  :after (clang-format)
  :hook (c-ts-mode . clang-format+-mode))
#+END_SRC

** which-key
Better help for keys

#+begin_src emacs-lisp
(use-package which-key
  :delight
  :init
  (which-key-mode))
#+end_src

** lsp-mode
Lsp mode, maybe try eglot sometime but at the moment Lsp mode works great

#+begin_src emacs-lisp
(use-package lsp-mode
  :after company
  :custom
  (lsp-intelephense-licence-key "00UDX5WYE44TGEN")
  (lsp-intelephense-format-enable nil)
  :hook ((lsp-mode . (lambda ()
                      (let ((lsp-keymap-prefix "C-c l"))
                        (lsp-enable-which-key-integration))))
	 (c-mode . lsp)
	 (vland-mode . lsp)
	 (web-mode . lsp)
	 (c++-ts-mode . lsp)
	 (c-ts-mode . lsp))
  :bind (:map lsp-mode-map
	      ("C-c l" . lsp-command-map)))
#+end_src

** lsp-ui
Lsp-ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :delight
  :custom
  (lsp-ui-doc-show-with-cursor nil)
  (lsp-ui-doc-show-with-mouse nil)
  :bind  
  (:map lsp-mode-map
        ("C-c d" . lsp-ui-doc-glance)))
#+end_src

** all-the-icons
Important for icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+end_src

** dashboard
Pretty good dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  :custom
  (dashboard-projects-backend 'projectile)
  (dashboard-items '((recents  . 5)
                     (projects . 5))))
#+end_src

** linum-relative
Relative lines with a nice arrow
#+begin_src emacs-lisp
(use-package linum-relative
  :delight
  :custom
  (linum-relative-current-symbol "->")
  :hook (prog-mode . linum-relative-mode))
#+end_src

** beacon
Highlights the line on focus
#+begin_src emacs-lisp
(use-package beacon
  :delight
  :custom
  (beacon-color "#00fa9a")
  :config
  (beacon-mode 1))
#+end_src

** helpful
Better help menu
#+begin_src emacs-lisp
(use-package helpful
  :bind (("C-h f" . helpful-callable)
	 ("C-h v" . helpful-variable)
	 ("C-h k" . helpful-key)
	 ("C-h x" . helpful-command)
	 ("C-c C-d" . helpful-at-point)))
#+end_src

** ace-window
Better other window
#+begin_src emacs-lisp
(use-package ace-window
  :bind ([remap other-window] . ace-window))
#+end_src

** ace-jump-mode
Jump to word using its first letter
#+begin_quote
Consider trying avy
#+end_quote

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :delight
  :custom
  (ace-jump-mode-case-fold t)
  :bind ("C-;" . ace-jump-mode)
  :config
  (ace-jump-mode-enable-mark-sync))
#+end_src



** goto-line-preview
Preview goto-line
#+begin_src emacs-lisp
(use-package goto-line-preview
  :bind ([remap goto-line] . goto-line-preview))
#+end_src

** indent-bars
Replacement for indent-guide
#+begin_src emacs-lisp
(use-package indent-bars
  :elpaca (indent-bars :host github :repo "jdtsmith/indent-bars")
  :hook ((c-ts-mode web-mode) . indent-bars-mode)
  :custom
  (indent-bars-prefer-character t))
  #+end_src

# ** indent-guide
# Shows vertical lines of indentation (necessary but might change to something else)
# #+begin_src emacs-lisp
# (use-package indent-guide
#   :delight
#   :hook (prog-mode . indent-guide-mode))
# #+end_src

** crux
Collection of Ridiculously Useful eXtensions for Emacs
#+begin_src emacs-lisp
(use-package crux
  :bind (("M-o" . crux-smart-open-line-above)
	 ("C-o" . crux-smart-open-line)))
#+end_src

** toc-org
Automatic Table of Content
#+begin_src emacs-lisp
(use-package toc-org
  :delight
  :hook (org-mode . toc-org-mode))
#+end_src

Global web mode
#+begin_src emacs-lisp
(use-package web-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.blade.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (setq web-mode-engines-alist
      '(("php"    . "\\.phtml\\'")
        ("blade"  . "\\.blade\\."))))
#+end_src

** Yasnippet
Snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :hook ((lsp-mode . yas-minor-mode) (org-mode . yas-minor-mode))
  :bind (:map yas-minor-mode-map

	      ("C-c SPC" . yas-expand)
	      ("<tab>" . nil))
  :config
  (yas-reload-all))
#+end_src

** hydra
Creates hydras
#+begin_src emacs-lisp
(use-package hydra)
#+end_src

** company
completion ui
#+begin_src emacs-lisp
(use-package company
  :demand t
  :bind (:map prog-mode-map
	      ("M-<tab>" . company-complete)
         :map org-mode-map
	      ("M-<tab>" . company-complete))
  :hook ((prog-mode . company-mode) (org-mode . company-mode))
  :custom
  (company-idle-delay nil)
  (company-frontends '(company-pseudo-tooltip-frontend))
  (company-tooltip-align-annotations t)
  (company-tooltip-limit 6)
  (company-tooltip-minimum 6)
  :config
  (setq company-format-margin-function #'company-vscode-light-icons-margin)
  (setq company-search-regexp-function #'company-search-words-in-any-order-regexp))
  #+end_src

** nov
ebook reader
#+begin_src emacs-lisp
(use-package nov :elpaca (:depth nil)
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src

** treesit-auto
#+begin_src emacs-lisp
(use-package treesit-auto
  :delight
  :demand t
  :custom
  (treesit-auto-install 'prompt)
  :config
  (global-treesit-auto-mode))
#+end_src

** vterm
#+begin_src emacs-lisp
(use-package vterm)
#+end_src

** flycheck
Flymake creates junk files and flycheck is better anyway

#+begin_src emacs-lisp
(use-package flycheck
  :delight
  :init (global-flycheck-mode))
#+end_src

** delight
Hides some major/minor modes

#+begin_src emacs-lisp
(use-package delight)
#+end_src

** combobulate
Might take a look later when C/C++ is supported
# #+begin_src emacs-lisp
# (use-package combobulate
#     :elpaca (combobulate :host github :repo "mickeynp/combobulate")
#     :preface
#     (setq combobulate-key-prefix "C-c o")
#     :hook ((python-ts-mode . combobulate-mode)
#            (c-ts-mode . combobulate-mode)))
# #+end_src

** dap-mode
Might take a look if I need debug for something else than C/C++
# #+begin_src emacs-lisp
# (use-package dap-mode
#   :config
#   (require 'dap-gdb-lldb)
#   (dap-gdb-lldb-setup)
#   (dap-auto-configure-mode 1)
#   (define-advice dap-debug (:after (orig-func &rest args) disable-lsp-ui-doc) (lsp-ui-doc-mode -1))
#   (define-advice dap-disconnect (:after (orig-func &rest args) enable-lsp-ui-doc) (lsp-ui-doc-mode t)))
# #+end_src

** undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode)
    :custom
    (undo-tree-history-directory-alist `(("." . ,(expand-file-name "undo" user-emacs-directory))))
    (undo-tree-auto-save-history t)
    :config
    (defadvice undo-tree-make-history-save-file-name
	(after undo-tree activate)
      (setq ad-return-value (concat ad-return-value ".gz"))))
#+end_src

** transpose-frame
Move Emacs' windows
#+begin_src emacs-lisp
(use-package transpose-frame)
#+end_src

** projectile
Faster and more complete compared to project.el
#+begin_src emacs-lisp
(use-package projectile
  :init
  (projectile-mode +1)
  :custom
  (projectile-auto-discover nil)
  :bind (:map global-map
              ("C-x p" . projectile-command-map)))
#+end_src

** List of packages I should look into
Empty for now ;)

* Themes

** Catpuccin
#+begin_src emacs-lisp
(use-package catppuccin-theme
  :demand t
  :custom
  (catppuccin-flavor 'latte)
  :config
  (catppuccin-reload))
#+end_src

** default theme
#+begin_src emacs-lisp
(use-package standard-themes)
#+end_src

** Loaded theme
#+begin_src emacs-lisp
(elpaca-wait)
(load-theme 'catppuccin :no-confirm)
;; (load-theme 'standard-light :no-confirm)
#+end_src

* Hooks
dap-mode or enable toolbar and menu bar when gdb mode enabled

# #+begin_src emacs-lisp
# (add-hook 'c-ts-mode-hook #'(lambda ()
#                               (setq-local tab-width 4
#                                           indent-line-function 'insert-tab)))
# #+end_src

* Language packages and config

#+begin_src emacs-lisp
(elpaca-wait)
#+end_src

** Laravel

*** Laravel projectile

#+begin_src emacs-lisp
(defhydra hydra-laravel (:color blue)
    "
^Laravel^
^^^^^^^^------
_m_: model
_v_: view
_c_: controler
"
    ("m" projectile-laravel-find-model)
    ("v" projectile-laravel-find-view)
    ("c" projectile-laravel-find-controller))

(use-package projectile-laravel
  :after hydra
  :elpaca (projectile-laravel :host github :repo "strikerlulu/projectile-laravel"))

(elpaca-wait)

(defun laravel-toggle ()
  (interactive)
  (if (bound-and-true-p projectile-laravel-global-mode)
      (progn
        (projectile-laravel-global-mode -1)
        (global-set-key (kbd "C-c p") nil))
    (progn
      (projectile-laravel-global-mode 1)
      (global-set-key (kbd "C-c p") 'hydra-laravel/body))))
  #+end_src

** Vlang

*** v-mode
#+begin_src emacs-lisp
(use-package vlang-mode
  :elpaca (vlang-mode :host github :repo "Naheel-Azawy/vlang-mode"))
#+end_src

*** v-analyzer
#+begin_src emacs-lisp
(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-language-id-configuration
    '(vlang-mode . "vlang"))

  (lsp-register-client
    (make-lsp-client :new-connection (lsp-stdio-connection (expand-file-name "~/.config/v-analyzer/bin/v-analyzer"))
                     :activation-fn (lsp-activate-on "vlang")
                     :server-id 'v-analyzer)))
#+end_src

** Yuck (eww)

*** yuck-mode
#+begin_src emacs-lisp
(use-package yuck-mode)
#+end_src

** C

#+begin_src emacs-lisp
(setq-default c-ts-mode-indent-offset 4)
(setq-default indent-tabs-mode nil)
#+end_src

* Org + LaTeX

** Packages

#+begin_src emacs-lisp

(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)
(load "texmathp.el" nil t t)

(elpaca-wait)

(use-package aas
  :hook (org-mode . aas-activate-for-major-mode)
  :config
  (aas-set-snippets 'org-mode
                    :cond #'texmathp
                    "/ens" '(yas "\\mathbb{$1} ")
                    "/fr" '(yas "\\frac{$1}{$2} ")
                    "_" '(yas "_{$1}")
                    "^" '(yas "^{$1}")
                    "/pt" "\\forall "
                    "/ex" "\\exists "
                    "RR" "\\mathbb{R} "
                    "NN" "\\mathbb{N} "
                    "<=" "\\leq"
                    ">=" "\\geq"
                    "=>" "\\implies"
                    "iif" "\\Longleftrightarrow"
                    "/abs" '(yas "\\displaystyle\\left\\lvert $1 \\right\\rvert $0")
                    "/norme" '(yas "\\lVert $1 \\rVert")
                    "/inf" "\\infty")
  (aas-set-snippets 'org-mode
                     ";i" '(yas "\\\\( $1 \\\\) $0")
                     ";e" '(yas "\\\\[ $1 \\\\] $0")))

(use-package org-fragtog
  :hook (org-mode . org-fragtog-mode))

(use-package org-elp
  :custom ((org-elp-idle-time 0.25)
           (org-elp-split-fraction 0.20)))

;; (use-package flycheck-grammalecte
;;              :hook (fountain-mode . flycheck-mode)
;;              :init
;;              (setq flycheck-grammalecte-report-apos nil
;;                    flycheck-grammalecte-report-esp nil
;;                    flycheck-grammalecte-report-nbsp nil)
;;              :config
;;              (add-to-list 'flycheck-grammalecte-enabled-modes 'org-mode)
;;              (grammalecte-download-grammalecte)
;;              (flycheck-grammalecte-setup))

;; (use-package org-latex-impatient
;;   :elpaca (org-latex-impatient :host github :repo "elogir/org-latex-impatient")
;;   :hook (org-mode . org-latex-impatient-mode)
;;   :custom (org-latex-impatient-tex2svg-bin
;;         "~/node_modules/mathjax-node-cli/bin/tex2svg")
;;   (org-latex-impatient-ignore-headers t)
;;   (org-latex-impatient-posframe-position 'point)
;;   (org-latex-impatient-posframe-position-handler 'posframe-poshandler-point-bottom-left-corner))

;; (use-package math-preview)

      #+end_src

** config

#+begin_src emacs-lisp
(with-eval-after-load 'ox-latex
(add-to-list 'org-latex-classes
             '("org-plain-latex"
               "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src
