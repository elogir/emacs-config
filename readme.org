#+TITLE: rigole's emacs config
#+AUTHOR: rigole
#+PROPERTY: header-args :tangle yes
#+auto_tangle: t
#+STARTUP: showeverything

* Table of contents :toc:
- [[#emacs-configuration][Emacs configuration]]
  - [[#garbage-collector-config-stolen-from-likhon-baroy][Garbage collector config (stolen from Likhon-baRoy)]]
- [[#global-keybindings][Global keybindings]]
- [[#global-packages][Global Packages]]
  - [[#org-auto-tangle][org-auto-tangle]]
  - [[#org-moder][org-moder]]
  - [[#clang-format][clang-format+]]
  - [[#lsp-mode][lsp-mode]]
  - [[#lsp-ui][lsp-ui]]
  - [[#all-the-icons][all-the-icons]]
  - [[#dashboard][dashboard]]
  - [[#linum-relative][linum-relative]]
  - [[#beacon][beacon]]
  - [[#helpful][helpful]]
  - [[#ace-window][ace-window]]
  - [[#ace-jump-mode][ace-jump-mode]]
  - [[#goto-line-preview][goto-line-preview]]
  - [[#indent-guide][indent-guide]]
  - [[#crux][crux]]
  - [[#toc-org][toc-org]]
  - [[#flycheck][flycheck]]
  - [[#tree-sitter][tree-sitter]]
  - [[#list-of-packages-i-should-look-into][List of packages I should look into]]
- [[#hooks][Hooks]]
- [[#language-packages-and-config][Language packages and config]]

* Emacs configuration

#+BEGIN_SRC emacs-lisp
;; Initialisation
(setq inhibit-default-init t
      inhibit-startup-echo-area-message t
      inhibit-startup-screen t
      initial-scratch-message nil)

;; enable y/n answers
(fset 'yes-or-no-p 'y-or-n-p)

;; Warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)

;; Keep emacs Custom-settings in separate file.
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))

;; store all backup and autosave files in the tmp dir
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; revert buffers automatically when underlying files are changed externally
(global-auto-revert-mode t)

;; Make backups of files, even when they're in version control.
(setq vc-make-backup-files t)

;; Defaults to UTF-8 (Hi Windows!)
(set-default-coding-systems 'utf-8)

;; Modes
(fido-mode t)
(electric-pair-mode t)
(winner-mode t)
(line-number-mode t)
(size-indication-mode t)
(delete-selection-mode t)

;; Removal of interface
(package-initialize)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Org mode fixes
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)

;; quick optimization for lsps
(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+END_SRC

** Garbage collector config (stolen from Likhon-baRoy)

#+begin_src emacs-lisp
;; BetterGC
(defvar better-gc-cons-threshold 134217728 ; 128mb
  "If you experience freezing, decrease this.
If you experience stuttering, increase this.")

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold better-gc-cons-threshold)))
;; -BetterGC

;; AutoGC
(add-hook 'emacs-startup-hook
          (lambda ()
            (if (boundp 'after-focus-change-function)
                (add-function :after after-focus-change-function
                              (lambda ()
                                (unless (frame-focus-state)
                                  (garbage-collect))))
              (add-hook 'after-focus-change-function 'garbage-collect))
            (defun gc-minibuffer-setup-hook ()
              (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

            (defun gc-minibuffer-exit-hook ()
              (garbage-collect)
              (setq gc-cons-threshold better-gc-cons-threshold))

            (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
            (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
;; -AutoGC
#+end_src

* Global keybindings
Mainly macros I use

#+begin_src emacs-lisp
;; Opens eshell window on the right
(global-set-key (kbd "C-c e") #'(lambda ()
				  (interactive)
				  (split-window-right)
				  (windmove-right)
				  (eshell)))
#+end_src

* Global Packages

** org-auto-tangle
Auto reloads org files
#+BEGIN_SRC emacs-lisp
(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+END_SRC

** org-moder
Makes org files way better
#+BEGIN_SRC emacs-lisp
(use-package org-modern
  :init
  (add-hook 'org-mode-hook #'org-modern-mode)
  (add-hook 'org-agenda-finalize-hook #'org-modern-agenda))
#+END_SRC

** clang-format+
Nice clang format package
#+BEGIN_SRC emacs-lisp
(use-package clang-format+
  :init
  (add-hook 'c-mode-common-hook #'clang-format+-mode))
#+END_SRC

** lsp-mode
Lsp mode, maybe try eglot sometime but at the moment Lsp mode works great
#+begin_quote
Maybe configure that ;)
#+end_quote

#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  (add-hook 'c-mode-hook #'lsp)
  (add-hook 'web-mode-hook #'lsp))
#+end_src

** lsp-ui
Lsp-ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :custom
  (lsp-ui-doc-show-with-cursor nil)
  (lsp-ui-doc-show-with-mouse nil)
  (define-key lsp-mode-map (kbd "C-c d") 'lsp-ui-doc-glance))
#+end_src

** all-the-icons
Important for icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+end_src

** dashboard
Pretty good dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook)
  :custom
  (dashboard-projects-backend 'project-el)
  (dashboard-items '((recents  . 5)
                     (projects . 5))))
#+end_src

** linum-relative
Relative lines with a nice arrow
#+begin_src emacs-lisp
(use-package linum-relative
  :custom
  (linum-relative-current-symbol "->")
  :config
  (add-hook 'prog-mode-hook #'(lambda () (interactive)
				(linum-relative-mode))))
#+end_src

** beacon
Highlights the line on focus
#+begin_src emacs-lisp
(use-package beacon
  :config
  (beacon-mode 1))
#+end_src

** helpful
Better help menu
#+begin_src emacs-lisp
(use-package helpful
  :config ; too lazy so I copy paste
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-h x") #'helpful-command)
  (global-set-key (kbd "C-c C-d") #'helpful-at-point))
#+end_src

** ace-window
Better other window
#+begin_src emacs-lisp
(use-package ace-window
  :config
  (global-set-key (kbd "C-x o") 'ace-window))
#+end_src

** ace-jump-mode
Jump to word using its first letter
#+begin_quote
Consider trying avy
#+end_quote

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :config
  (global-set-key (kbd "C-;") 'ace-jump-mode)
  :custom
  (ace-jump-mode-case-fold t))
#+end_src

** goto-line-preview
Preview goto-line
#+begin_src emacs-lisp
(use-package goto-line-preview
  :config
  (global-set-key [remap goto-line] 'goto-line-preview))
#+end_src

** indent-guide
Indent lines (necessary)
#+begin_src emacs-lisp
(use-package indent-guide
  :init
  (add-hook 'prog-mode-hook #'indent-guide-mode))
#+end_src

** crux
Collection of Ridiculously Useful eXtensions for Emacs
#+begin_src emacs-lisp
(use-package crux
  :config
  (global-set-key (kbd "C-k") 'crux-smart-kill-line)
  (global-set-key (kbd "C-o") 'crux-smart-open-line)
  (global-set-key (kbd "M-o") 'crux-smart-open-line-above))
#+end_src

** toc-org
Automatic Table of Content
#+begin_src emacs-lisp
(use-package toc-org
  :init
  (add-hook 'org-mode-hook 'toc-org-mode))
#+end_src

Global web mode
#+begin_src emacs-lisp
(use-package web-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.blade.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (setq web-mode-engines-alist
      '(("php"    . "\\.phtml\\'")
        ("blade"  . "\\.blade\\."))))
#+end_src

** flycheck
Flycheck to replace flymake
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+end_src

** tree-sitter
Tree-sitter (Should be removed after upgrading to Emacs 29+)
#+begin_src emacs-lisp
(use-package tree-sitter)
(use-package tree-sitter-langs
  :after (tree-sitter)
  :config
  (global-tree-sitter-mode))
#+end_src

** List of packages I should look into

- dimmer
- vertico
- move-dup
- undo-tree or alternatives
- yasnippet after configuring some ui
- flycheck

* Hooks
dap-mode or enable toolbar and menu bar when gdb mode enabled

* Language packages and config
